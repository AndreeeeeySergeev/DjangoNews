"""
Django settings for Newspaper project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import allauth

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-r+vh)afv)+gpjlp+$036maw(s2dph%li^dh7$^neo9g3%t=ogm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
	'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.flatpages',
    'django.contrib.sites',
    'fpages',
    'news.apps.NewsConfig',
    'accounts',
    'django_filters',
    'django_apscheduler',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',

]


SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
     # 'allauth.account.middleware.AccountMiddleware', #  it is working only from version 0.56+, 0.54 is using
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
	'Newspaper.Middlewares.TimezoneMiddleware',
]

ROOT_URLCONF = 'Newspaper.urls'

LOCALE_PATH = [
	os.path.join(BASE_DIR, 'locale')
	]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'Newspaper.wsgi.application'
LANGUAGES = [
	('en-us', 'English'),
	('ru', 'Русский'),
	]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
        'TIMEOUT': 300  # для всего сайта
        # '172.19.26.240:11211',                                      # 'django.core.cache.backends.db.DatabaseCache'
                                                                    # 'django.core.cache.backends.dummy.DummyCache'
                                                                    # 'django.core.cache.backends.locmem.LocMemCache'
                                                                    # 'django.core.cache.backends.memcached.MemcachedCache'
                                                                    # 'django.core.cache.backends.memcached.PyLibMCCache'
        }
    }

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache', # 'django.core.cache.backends.db.DatabaseCache'
                                                                    # 'django.core.cache.backends.dummy.DummyCache'
                                                                    # 'django.core.cache.backends.filebased.FileBasedCache'
                                                                    # 'django.core.cache.backends.locmem.LocMemCache'
                                                                    # 'django.core.cache.backends.memcached.MemcachedCache'
                                                                    # 'django.core.cache.backends.memcached.PyLibMCCache'
# 'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'postgres',
#         'USER': 'postgres',
#         'PASSWORD': '',
#         'HOST': 'localhost',
#         'PORT': '5432
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR / 'static']

LOGIN_REDIRECT_URL = '/news'

LOGOUT_REDIRECT_URL = '/accounts/login'


ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory' #'none', 'optional'

ACCOUNT_FORMS = {'signup': 'accounts.forms.CustomSignupForm'}

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'SergeevAndreyAleksandrovich@yandex.ru'
EMAIL_HOST_PASSWORD = 'xfcrdtqomzhsurrt'
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = 'SergeevAndreyAleksandrovich@yandex.ru'
SERVER_EMAIL = 'SergeevAndreyAleksandrovich@yandex.ru'
MANAGERS = (
    ('Ivan', 'ivan@yandex.ru'),
    ('Peter', 'Peter@yandex.ru'),
)
ADMINS = (
    ('Anton', 'Anton@example.ru'),
    ('Aleksey', 'Aleksey@examlpe.ru')
)

APSCHEDULER_DATETIME_FORMAT = 'N j, Y, f:s a'
APSCHEDULER_RUN_NOW_TIMEOUT = 30

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Chita'
CELERY_TASK_TIME_LIMIT = 30 * 60
## Redis Lab CELERY_BROKER_URL CELERY_RESULT_BACKEND = 'redis://пароль@endpoint:port'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
	'style': '{',
	'formatters': {
		'verbose_simple': {
			'format': '%(asctime)s %(levelname)s %(message)s',
			'datetime': '%Y.%m.%d %H:%M:%S',
			},
		'verbose': {
			'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s',
			'datetime': '%Y.%m.%d %H:%M:%S',
			},
		'verbose_again': {
			'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s %(exc_info)s',
			'datetime': '%Y.%m.%d %H:%M:%S'
			},
		'format_general': {
			'format': '%(asctime)s %(levelname)s %(module)s %(message)s',
			'datetime': '%Y.%m.%d %H:%M:%S'
			},
		},
	'filter': {
		'require_debug_true': {
			'()': 'django.utils.log.RequireDebugTrue'
			},
		'require_debug_false': {
			'()': 'django.utils.log.RequireDebugFalse'
			}
		},
	'handler': {
		'console': {
			'level': 'DEBUG',
			'filter': ['require_debug_true'],
			'class': 'logging.StreamHandler',
			'formatter': 'verbose_simple',
			},
		'console1': {
			'level': 'WARNING',
			'filter': ['require_debug_true'],
			'class': 'logging.StreamHandler',
			'formatter': 'verbose',
			},
		'console2': {
			'level': 'ERROR',
			'filter': ['require_debug_true'],
			'class': 'logging.StreamHandler',
			'formatter': 'verbose_again',
			},
		'print_in_file': {
			'level': 'INFO',
			'filter': ['require_debug_false'],
			'class': 'logging.FileHandler',
			'filename': 'general.log',
			'formatter': 'format_general',
			},
		'print_in_errorlog': {
			'level': 'ERROR',
			'filter': ['require_debug_true'],
			'class': 'logging.FileHandler',
			'filename': 'errors.log',
			'format': 'verbose_again'
			},
		'security_log': {
			'level': 'INFO',
			'filter': ['require_debug_true'],
			'class': 'logging.FileHandler',
			'filename': 'security.log',
			'format': 'format_general'
			},
		'mail_handler': {
			'level': 'ERROR',
			'filter': ['require_debug_false'],
			'class': 'django.utils.log.AdminEmailHandler',
			'format': 'verbose_again',
			}
		},
	'logger': {
		'django': {
			'handlers': ['console', 'console1', 'console3', 'print_in_file'],
			'propagate': False,
			},
		'django.request': {
			'handlers': ['print_in_errorlog', 'mail_handler'],
			'level': 'ERROR',
			'propagate': True,

			},
		'django.server': {
			'handlers': ['print_in_errorlog', 'mail_handler'],
			'level': 'ERROR',
			'propagate': True,
			},
		'django.template': {
			'handlers': ['print_in_errorlog'],
			'level': 'ERROR',
			'propagate': True,
			},
		'django.db.backends': {
			'handlers': ['print_in_errorlog'],
			'level': 'ERROR',
			'propagate': True,
			},
		'django.security': {
			'handlers': ['security_log'],
			'level': 'WARNING',
			}
		}
	}